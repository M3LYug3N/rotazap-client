import {
  AbcpResponse,
  CrossData,
  CrossImage,
  LocalOfferGroupList
} from "@/features/search/types";

import axiosInstance from "@/libs/axios";

export const fetchCrossesData = async (
  number: string,
  brand: string,
  userId: number
): Promise<CrossData | null> => {
  if (!userId) {
    console.warn("User ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω");
    return null;
  }

  try {
    const response = await axiosInstance.get<AbcpResponse>(
      `${process.env.NEXT_PUBLIC_SERVER_URL}/abcp/article-info`,
      {
        params: {
          number,
          brand,
          userId,
          format: "bnpchmti",
          locale: "ru_RU"
        }
      }
    );

    const data = response.data;

    if (!data || Object.keys(data).length === 0) {
      console.warn("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö");
      return null;
    }

    const localOffers: LocalOfferGroupList[] = data.localOffers || [];

    // üí¨ –û—Ç–ª–∞–¥–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const rawImages =
      Array.isArray(data.images) && typeof data.images[0] === "string"
        ? (data.images as unknown as string[])
        : [];
    console.log("üì¶ [ABCP] Raw images:", rawImages);

    const mappedImages: CrossImage[] = rawImages
      .filter((img: string, i) => {
        const valid = typeof img === "string" && img.trim().length > 0;
        if (!valid) {
          console.warn(`‚ö†Ô∏è [ABCP] –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ [${i}]:`, img);
        }
        return valid;
      })
      .map(img => {
        const name = img.split("/").pop() ?? "unnamed";
        const url = img;
        console.log(`‚úÖ [ABCP] –ö–∞—Ä—Ç–∏–Ω–∫–∞: ${name} ‚Üí ${url}`);
        return { name, order: 0, url };
      });

    const mapped: CrossData = {
      brand: data.brand || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥",
      number: data.number || number,
      outerNumber: data.outer_number || number,
      descr: data.descr || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
      properties: data.properties || {},
      localOffers, // ‚úÖ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ map
      images: mappedImages,
      imagesCount: data.images_count || 0
    };

    return mapped;
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–æ—Å—Å–∞—Ö:", error.message);
      throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
    } else {
      console.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      throw new Error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
    }
  }
};
