import { BasketDiffItem } from "@/features/office/basket/types/basket-diff.type";

import axios from "axios";

export interface BasketItem {
  selected: boolean;
  skuId: number;
  supplierId: number;
  hash: string;
  brand: string;
  article: string;
  descr: string;
  price: number; // –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ü–µ–Ω–∞
  basePrice: number; // –∑–∞–∫—É–ø–æ—á–Ω–∞—è
  qty: number;
  availableQty: number;
  deliveryDays?: number;
}

const API_URL = process.env.NEXT_PUBLIC_SERVER_URL;
const withCredentials = { withCredentials: true };

// üîî –¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
const notifyBasketUpdate = () => {
  const channel = new BroadcastChannel("basket-sync");
  channel.postMessage("update");
  channel.close();
};

// üõí –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
export const fetchBasket = async (): Promise<BasketItem[]> => {
  const res = await axios.get(`${API_URL}/basket`, withCredentials);

  return res.data.map((item: any) => ({
    skuId: item.skuId,
    supplierId: item.supplierId,
    hash: item.hash,
    brand: item.brand,
    article: item.article,
    descr: item.descr,
    price: item.price,
    basePrice: item.basePrice,
    qty: item.qty,
    deliveryDays: item.deliveryDays ?? 0,
    availableQty: item.availableQty ?? 0,
    selected: item.selected ?? false
  }));
};

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
export const addToBasket = async (item: BasketItem) => {
  const payload = {
    skuId: item.skuId,
    supplierId: item.supplierId,
    qty: item.qty,
    price: item.price,
    basePrice: item.basePrice,
    descr: item.descr,
    article: item.article,
    brand: item.brand,
    hash: item.hash,
    deliveryDays: item.deliveryDays
  };

  await axios.post(`${API_URL}/basket/add`, payload, withCredentials);
  notifyBasketUpdate();
};

// ‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ (–∏–ª–∏ —É–±—Ä–∞—Ç—å 1 —à—Ç.)
export const removeFromBasket = async (
  skuId: number,
  supplierId: number,
  hash: string
) => {
  await axios.post(
    `${API_URL}/basket/remove`,
    { skuId, supplierId, hash },
    withCredentials
  );
  notifyBasketUpdate();
};

// ‚ùå –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
export const deleteFromBasket = async (
  skuId: number,
  supplierId: number,
  hash: string
) => {
  await axios.post(
    `${API_URL}/basket/delete`,
    { skuId, supplierId, hash },
    withCredentials
  );
  notifyBasketUpdate();
};

// üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const clearBasket = async () => {
  await axios.delete(`${API_URL}/basket/clear`, withCredentials);
  notifyBasketUpdate();
};

// ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
export const validateBasket = async (
  items: BasketItem[]
): Promise<BasketDiffItem[]> => {
  const res = await fetch(`${API_URL}/basket/compare`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include",
    body: JSON.stringify(
      items.map(item => ({
        skuId: item.skuId,
        supplierId: item.supplierId,
        qty: item.qty,
        price: item.price,
        article: item.article,
        brand: item.brand,
        descr: item.descr,
        hash: item.hash,
        deliveryDays: item.deliveryDays
      }))
    )
  });

  if (!res.ok) {
    throw new Error("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã");
  }

  return await res.json();
};
